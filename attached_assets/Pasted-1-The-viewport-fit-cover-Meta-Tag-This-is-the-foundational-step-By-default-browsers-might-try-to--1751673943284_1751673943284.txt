1. The viewport-fit=cover Meta Tag
This is the foundational step. By default, browsers might try to fit your content within the "safe" area, leading to unwanted white space. To make your app utilize the full screen, including areas that might be obscured by device UI, you need to add viewport-fit=cover to your viewport meta tag in your HTML's <head>:

HTML

<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
This tells the browser to render your content to the very edges of the screen, essentially "covering" the entire viewport.

2. CSS env() Variables for Safe Area Insets
Once viewport-fit=cover is set, you can use CSS environment variables to get the actual dimensions of the "unsafe" areas. These variables are:

safe-area-inset-top
safe-area-inset-right
safe-area-inset-bottom
safe-area-inset-left
These values will be 0px on devices without such UI elements or when in an orientation where they don't interfere. On devices with notches, status bars, or home indicators, these variables will contain the pixel values of the respective insets.

How to use them:

You can apply these as padding or margin to elements that might be affected.

Example for your header and footer:

CSS

/* For your header */
.app-header {
  padding-top: env(safe-area-inset-top);
  /* Add other padding/styling as needed */
}

/* For your footer */
.app-footer {
  padding-bottom: env(safe-area-inset-bottom);
  /* Add other padding/styling as needed */
}

/* For main content that might be pushed down/up */
.main-content {
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
}
Important considerations for env():

Fallback values: It's good practice to provide a fallback value in case env() is not supported (though widely supported now).
CSS

padding-top: env(safe-area-inset-top, 20px); /* Defaults to 20px if not supported */
Fixed position elements: This is particularly crucial for position: fixed elements like your headers and footers, as they are relative to the viewport and would otherwise be obscured.
Landscape mode: Don't forget about safe-area-inset-left and safe-area-inset-right for landscape mode, especially on devices with camera cutouts on the sides.
3. Handling Modals
Modals often take up the full screen or a significant portion of it. You'll want to apply similar safe area padding to their content to ensure elements within the modal aren't cut off.

CSS

.app-modal .modal-content {
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
  padding-left: env(safe-area-inset-left);
  padding-right: env(safe-area-inset-right);
}