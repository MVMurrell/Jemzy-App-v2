{
  "totalInstances": 16,
  "byEndpoint": {
    "/api/videos/:id/purchased": [
      {
        "lineNumber": 357,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "/api/videos/:id/purchased",
        "variableName": "userId",
        "contextLines": [
          "  });",
          "",
          "  // Check if video is purchased by user",
          "  app.get('/api/videos/:id/purchased', isAuthenticated, async (req: any, res) => {",
          "    try {",
          "      const videoId = req.params.id;",
          "      const rawUserId = req.user.claims.sub;",
          "      ",
          "      // Apply the same user ID mapping logic",
          "      let userId = rawUserId;",
          "      if (userId === \"43317410\") {",
          "        userId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        userId = `google-oauth2|${userId}`;",
          "      }",
          "      ",
          "      const isPurchased = await storage.isVideoPurchased(userId, videoId);",
          "      res.json({ purchased: isPurchased });",
          "    } catch (error) {",
          "      console.error(\"Error checking video purchase status:\", error);",
          "      res.status(500).json({ message: \"Failed to check purchase status\" });"
        ]
      }
    ],
    "unknown": [
      {
        "lineNumber": 552,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "unknown",
        "contextLines": [
          "      ",
          "      if (isNaN(latitude) || isNaN(longitude)) {",
          "        return res.status(400).json({ message: \"Invalid latitude or longitude\" });",
          "      }",
          "      ",
          "      // Check if user is authenticated to get watched status",
          "      let videos;",
          "      if (req.user && req.user.claims && req.user.claims.sub) {",
          "        // Map user ID for consistency",
          "        let userId = req.user.claims.sub;",
          "        if (userId === \"43317410\") {",
          "          userId = \"google-oauth2|117032826996185616207\";",
          "        } else {",
          "          userId = `google-oauth2|${userId}`;",
          "        }",
          "        ",
          "        console.log(`üîç NEARBY VIDEOS: Fetching videos with watch status for user: ${userId}`);",
          "        videos = await storage.getVideosByLocationWithWatchStatus(latitude, longitude, radiusNum, userId, limitNum);",
          "        console.log(`üîç NEARBY VIDEOS: First video watch status example:`, videos[0] ? { id: videos[0].id, title: videos[0].title, watchedByUser: videos[0].watchedByUser } : 'No videos');",
          "      } else {",
          "        console.log(`üîç NEARBY VIDEOS: Fetching videos without watch status (unauthenticated)`);"
        ]
      },
      {
        "lineNumber": 2451,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "      // This ensures private groups owned by the user can still be accessed",
          "      const group = await storage.getGroupById(groupId);",
          "",
          "      if (!group) {",
          "        return res.status(404).json({ message: \"Group not found\" });",
          "      }",
          "",
          "      // Check if user has access to this group",
          "      const userId = req.user?.sub;",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else if (userId) {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "",
          "      // Allow access if:",
          "      // 1. Group is public",
          "      // 2. User is the owner",
          "      // 3. User is a member",
          "      if (!group.isPublic && formattedUserId) {"
        ]
      },
      {
        "lineNumber": 2495,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "      ",
          "      console.log(`üöÄ UPDATE GROUP EXTRACTED USER ID:`, userId);",
          "      ",
          "      if (!userId) {",
          "        console.log(`üöÄ UPDATE GROUP: No user ID found`);",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "      ",
          "      // Map specific user to their original Auth0 ID to preserve profile data",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "      ",
          "      console.log(`üöÄ UPDATE GROUP: Attempting to update group ${groupId} by user ${formattedUserId}`);",
          "      console.log(`üöÄ UPDATE GROUP: Update data:`, { name, description, isPublic, coverImageUrl });",
          "      ",
          "      // Check if user is the owner",
          "      const group = await storage.getGroupById(groupId);"
        ]
      },
      {
        "lineNumber": 2544,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "      ",
          "      console.log(`üîç JOIN GROUP: User ${userId} attempting to join group ${groupId}`);",
          "      ",
          "      if (!userId) {",
          "        console.log(`üîç JOIN GROUP: Authentication failed - no user ID`);",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "",
          "      // Map specific user to their original Auth0 ID to preserve profile data",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "      ",
          "      console.log(`üîç JOIN GROUP: Formatted user ID: ${formattedUserId}`);",
          "      console.log(`üîç JOIN GROUP: Attempting to join group ${groupId} with user ${formattedUserId}`);",
          "      ",
          "      // Check if user is already a member",
          "      const membershipStatus = await storage.getGroupMembershipStatus(formattedUserId, groupId);"
        ]
      },
      {
        "lineNumber": 2594,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "    try {",
          "      const groupId = req.params.id;",
          "      const userId = req.user?.claims?.sub || req.user?.sub;",
          "      ",
          "      if (!userId) {",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "",
          "      // Map specific user to their original Auth0 ID to preserve profile data",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "      await storage.leaveGroup(groupId, formattedUserId);",
          "      res.json({ message: \"Successfully left group\" });",
          "    } catch (error) {",
          "      console.error(\"Error leaving group:\", error);",
          "      res.status(500).json({ message: \"Failed to leave group\" });",
          "    }"
        ]
      },
      {
        "lineNumber": 2619,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "    try {",
          "      const groupId = req.params.id;",
          "      const userId = req.user?.claims?.sub || req.user?.sub;",
          "      ",
          "      if (!userId) {",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "",
          "      // Map specific user to their original Auth0 ID to preserve profile data",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "      ",
          "      // Check actual membership status",
          "      const membershipStatus = await storage.getGroupMembershipStatus(formattedUserId, groupId);",
          "      res.json(membershipStatus);",
          "    } catch (error) {",
          "      console.error(\"Error fetching group membership:\", error);"
        ]
      },
      {
        "lineNumber": 2676,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "      const groupId = req.params.id;",
          "      const { title, description } = req.body;",
          "      const userId = req.user?.claims?.sub || req.user?.sub;",
          "",
          "      if (!userId) {",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "",
          "      // Map specific user to their original Auth0 ID to preserve profile data",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "",
          "      if (!title?.trim()) {",
          "        return res.status(400).json({ message: \"Thread title is required\" });",
          "      }",
          "",
          "      // Check if user is a member of the group"
        ]
      },
      {
        "lineNumber": 2735,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "      if (!userId) {",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "",
          "      if (!content?.trim()) {",
          "        return res.status(400).json({ message: \"Message content is required\" });",
          "      }",
          "",
          "      // Map specific user to their original Auth0 ID",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "",
          "      const message = await storage.addThreadMessage({",
          "        threadId,",
          "        userId: formattedUserId,",
          "        message: content,",
          "        messageType: 'text'"
        ]
      },
      {
        "lineNumber": 2846,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "      ",
          "      console.log('üé¨ WATCH ENDPOINT: Request received for video:', videoId, 'user:', userId);",
          "      ",
          "      if (!userId) {",
          "        console.log('üé¨ WATCH ENDPOINT: Authentication failed - no user ID');",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "",
          "      // Map specific user to their original Auth0 ID to preserve profile data",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "",
          "      console.log('üé¨ WATCH ENDPOINT: Formatted user ID:', formattedUserId);",
          "      ",
          "      await storage.markVideoAsWatched(formattedUserId, videoId);",
          "      console.log('üé¨ WATCH ENDPOINT: Successfully marked video as watched:', videoId, 'by user:', formattedUserId);",
          "      res.json({ message: \"Video marked as watched\" });"
        ]
      },
      {
        "lineNumber": 3095,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "        500: { amount: 5999, price: \"$59.99\" }  // 500 coins for $59.99",
          "      };",
          "      ",
          "      const packageInfo = coinPricing[coinAmount];",
          "      if (!packageInfo) {",
          "        return res.status(400).json({ message: \"Invalid coin amount\" });",
          "      }",
          "      ",
          "      // Format user ID for database lookup  ",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "      ",
          "      const user = await storage.getUser(formattedUserId);",
          "      if (!user) {",
          "        return res.status(404).json({ message: \"User not found\" });",
          "      }",
          "      "
        ]
      },
      {
        "lineNumber": 3208,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "unknown",
        "variableName": "formattedUserId",
        "contextLines": [
          "      ",
          "      // Retrieve payment intent from Stripe",
          "      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);",
          "      ",
          "      if (paymentIntent.status !== 'succeeded') {",
          "        return res.status(400).json({ message: \"Payment not completed\" });",
          "      }",
          "      ",
          "      // Format user ID for database lookup",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "      ",
          "      if (paymentIntent.metadata.userId !== formattedUserId) {",
          "        return res.status(403).json({ message: \"Payment does not belong to user\" });",
          "      }",
          "      ",
          "      // Check if coins were already awarded"
        ]
      }
    ],
    "/api/videos/chunked-upload/complete": [
      {
        "lineNumber": 2025,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "/api/videos/chunked-upload/complete",
        "variableName": "unknown",
        "contextLines": [
          "  });",
          "",
          "  // Complete chunked upload",
          "  app.post(\"/api/videos/chunked-upload/complete\", isAuthenticated, async (req: any, res) => {",
          "    console.log(`üîç CHUNKED COMPLETE: Endpoint called with uploadId: ${req.body.uploadId}, videoType: ${req.body.videoType}`);",
          "    try {",
          "      console.log('üîç CHUNKED: Complete upload request');",
          "      let userId = req.user.claims.sub;",
          "      ",
          "      // Apply user ID mapping for existing user to preserve data consistency",
          "      if (userId === \"43317410\") {",
          "        userId = \"google-oauth2|117032826996185616207\";",
          "        console.log(`üîê CHUNKED: Mapping Replit user ${req.user.claims.sub} to original Auth0 ID: ${userId}`);",
          "      } else {",
          "        // For new users, use the standard google-oauth2 format",
          "        userId = `google-oauth2|${userId}`;",
          "      }",
          "      const { uploadId } = req.body;",
          "      ",
          "      if (!activeUploads.has(uploadId)) {",
          "        return res.status(404).json({ message: \"Upload not found\" });"
        ]
      }
    ],
    "/api/groups": [
      {
        "lineNumber": 2332,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "/api/groups",
        "variableName": "formattedUserId",
        "contextLines": [
          "  // Create new group",
          "  app.post(\"/api/groups\", requireAuth, async (req: any, res) => {",
          "    try {",
          "      const userId = req.user?.claims?.sub || req.user?.sub;",
          "      if (!userId) {",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "",
          "      // Map specific user to their original Auth0 ID to preserve profile data",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "      ",
          "      const groupData = {",
          "        ...req.body,",
          "        createdBy: formattedUserId",
          "      };",
          ""
        ]
      }
    ],
    "/api/groups/user": [
      {
        "lineNumber": 2395,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "/api/groups/user",
        "variableName": "formattedUserId",
        "contextLines": [
          "  // Get user's groups (all groups they are a member of)",
          "  app.get(\"/api/groups/user\", requireAuth, async (req: any, res) => {",
          "    try {",
          "      const userId = req.user?.claims?.sub || req.user?.sub;",
          "      if (!userId) {",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "",
          "      // Map specific user to their original Auth0 ID to preserve profile data",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "      const groups = await storage.getUserGroups(formattedUserId);",
          "      res.json(groups);",
          "    } catch (error) {",
          "      console.error(\"Error fetching user groups:\", error);",
          "      res.status(500).json({ message: \"Failed to fetch user groups\" });",
          "    }"
        ]
      }
    ],
    "/api/groups/owned": [
      {
        "lineNumber": 2418,
        "line": "if (userId === \"43317410\") {",
        "endpoint": "/api/groups/owned",
        "variableName": "formattedUserId",
        "contextLines": [
          "  // Get user's owned groups (only groups they created/own)",
          "  app.get(\"/api/groups/owned\", requireAuth, async (req: any, res) => {",
          "    try {",
          "      const userId = req.user?.claims?.sub || req.user?.sub;",
          "      if (!userId) {",
          "        return res.status(401).json({ message: \"User not authenticated\" });",
          "      }",
          "",
          "      // Map specific user to their original Auth0 ID to preserve profile data",
          "      let formattedUserId = userId;",
          "      if (userId === \"43317410\") {",
          "        formattedUserId = \"google-oauth2|117032826996185616207\";",
          "      } else {",
          "        formattedUserId = `google-oauth2|${userId}`;",
          "      }",
          "      const groups = await storage.getUserGroups(formattedUserId);",
          "      // Filter to only groups where user is owner",
          "      const ownedGroups = groups.filter(group => group.isOwner);",
          "      res.json(ownedGroups);",
          "    } catch (error) {",
          "      console.error(\"Error fetching owned groups:\", error);"
        ]
      }
    ]
  },
  "instances": [
    {
      "line": 357,
      "endpoint": "/api/videos/:id/purchased",
      "variable": "userId"
    },
    {
      "line": 552,
      "endpoint": "unknown",
      "variable": "unknown"
    },
    {
      "line": 2025,
      "endpoint": "/api/videos/chunked-upload/complete",
      "variable": "unknown"
    },
    {
      "line": 2332,
      "endpoint": "/api/groups",
      "variable": "formattedUserId"
    },
    {
      "line": 2395,
      "endpoint": "/api/groups/user",
      "variable": "formattedUserId"
    },
    {
      "line": 2418,
      "endpoint": "/api/groups/owned",
      "variable": "formattedUserId"
    },
    {
      "line": 2451,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    },
    {
      "line": 2495,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    },
    {
      "line": 2544,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    },
    {
      "line": 2594,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    },
    {
      "line": 2619,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    },
    {
      "line": 2676,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    },
    {
      "line": 2735,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    },
    {
      "line": 2846,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    },
    {
      "line": 3095,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    },
    {
      "line": 3208,
      "endpoint": "unknown",
      "variable": "formattedUserId"
    }
  ]
}